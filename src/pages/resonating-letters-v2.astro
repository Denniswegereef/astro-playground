---
import Layout from "../layouts/Layout.astro";
import { LETTERS_REGULAR_RIGHT_ALL } from "@/components/resonating-letters";
---

<Layout title="Resonating letters v2">
  <main>
    {
      LETTERS_REGULAR_RIGHT_ALL.map((letters) => (
        <div class="container">
          {letters.letters.map((letter) => (
            <h1>
              <span
                class="span__container"
                data-letter
                data-text-style="regular-right"
                data-letter-text={letter}
              >
                {letters.slices.map((slice, index) => (
                  <span
                    class="span__letter"
                    data-character
                    data-percentage={slice.margin}
                    class="character"
                    style={{
                      marginLeft: `${slice.margin}%`,
                      clipPath: slice.clipPath,
                    }}
                  >
                    {letter}
                  </span>
                ))}
              </span>
            </h1>
          ))}
        </div>
      ))
    }
  </main>

  <script>
    const percentageToEm = (
      percentage: number,
      containerWidth: number,
      baseFontSize: number
    ) => {
      const containerWidthInEm = containerWidth / baseFontSize;
      const emValue = (percentage / 100) * containerWidthInEm;
      return emValue;
    };

    // Find our component DOM on the page.
    const letters = [
      ...document.querySelectorAll("[data-letter]"),
    ] as HTMLElement[];

    const baseFontSize = parseFloat(
      window.getComputedStyle(letters[0]).fontSize
    );

    const calculatedSizes = letters.map((letter) => {
      const textStyle = letter.dataset.textStyle || "";

      const currentLetter = letter.dataset.letterText || "";

      const characters = [
        ...letter.querySelectorAll("[data-character]"),
      ] as HTMLElement[];

      const containerWidth = letter.getBoundingClientRect().width || 0;

      const calculatedCharacters = characters.map((character) => {
        const percentage = parseFloat(character?.dataset?.percentage || "0");

        const emValue = percentageToEm(
          percentage,
          containerWidth,
          baseFontSize
        );

        character.style.marginLeft = `${emValue}em`;

        return emValue;
      });

      return {
        letter: currentLetter,
        styles: {
          margin: calculatedCharacters,
          clipPath: characters.map((character) => character.style.clipPath),
        },
        textStyle,
      };
    });
  </script>

  <style lang="scss">
    /* Register your custom font family and tell the browser where to find it. */
    @font-face {
      font-family: "Basel-Grotesk";
      font-style: normal;
      font-weight: 600;
      font-display: swap;
      src: url("/fonts/Basel-Grotesk/Basel-Grotesk-Bold.otf") format("opentype");
    }

    body {
      font-feature-settings: "ss02", "tnum" 1, "lnum" 1, "liga" 0, "clig" 0,
        "calt" 0;
      font-family: "Basel-Grotesk", sans-serif;
      font-weight: 600;
      padding-bottom: 200px;
    }

    .container {
      display: flex;
      gap: 4rem;
    }

    .span__container {
      position: relative;
      display: inline-grid;
      grid-template-areas: "char";
      place-items: flex-start;
    }

    .span__letter {
      grid-area: char;
      position: relative;
      display: inline-block;
      // color: red;

      transition: margin-left 0.5s cubic-bezier(0.83, 0, 0.17, 1),
        clip-path 0.6s cubic-bezier(0.83, 0, 0.17, 1), color 0.3s ease-in-out;
    }

    h1 {
      display: flex;
      margin: 0;
      font-size: 10rem;
      line-height: 0.9;
      letter-spacing: -0.02em;
      cursor: pointer;

      &:hover {
        // color: red;

        span {
          color: #00a0ff;
          margin-left: 0em !important;
          clip-path: polygon(0% 0%, 100% 0, 100% 130%, 0% 130%);
        }
      }
    }
  </style>
</Layout>
